<?php
/**
 * @version		$Id: JDatabaseQueryTest.php 20196 2011-01-09 02:40:25Z ian $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

require_once JPATH_TESTS.'/suite/joomla/database/JDatabasePostgreSQLQueryInspector.php';

require_once JPATH_PLATFORM.'/joomla/database/database/postgresqlquery.php';

require_once JPATH_TESTS.'/includes/JoomlaPostgreSQLTestCase.php';

/**
 * Test class for JDatabaseQuery.
 * Generated by PHPUnit on 2009-10-08 at 22:01:11.
 */
class JDatabasePostgreSQLQueryTest extends JoomlaPostgreSQLTestCase
{
	/**
	 * @var  JDatbabase  A mock of the JDatabase object for testing purposes.
	 */
	protected $dbo;

	/**
	 * Data for the testNullDate test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestNullDate()
	{
		return array(
			// quoted, expected
			array(true, "'1970-01-01 00:00:00+00'"),
			array(false, "1970-01-01 00:00:00+00"),
		);
	}

	/**
	 * Data for the testNullDate test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestQuote()
	{
		return array(
			// text, escaped, expected
			array('text', false, "'text'"),
		);
	}
	
	/**
	 * Data for the testJoin test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestJoin()
	{
		return array(
			// $type, $conditions
			array('', 		'b ON b.id = a.id'),
			array('INNER',	'b ON b.id = a.id'),
			array('OUTER',	'b ON b.id = a.id'),
			array('LEFT',	'b ON b.id = a.id'),
			array('RIGHT',	'b ON b.id = a.id'),
		);
	}

	/**
	 * Data for the testLock test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestLock()
	{
		return array(
			// $table_name, $lock_type
			array('jos_dbtest', 'ACCESS SHARE'),
			array('jos_dbtest',	'ROW SHARE'),
			array('jos_dbtest',	'ROW EXCLUSIVE'),
			array('jos_dbtest',	'SHARE UPDATE EXCLUSIVE'),
			array('jos_dbtest',	'SHARE'),
			array('jos_dbtest',	'SHARE ROW EXCLUSIVE'),
			array('jos_dbtest',	'EXCLUSIVE'),
			array('jos_dbtest',	'ACCESS EXCLUSIVE'),
		);
	}
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->dbo = $this->getMockDatabase();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @todo Implement test__toString().
	 */
	public function test__toString()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test for the castAsChar method.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testCastAsChar()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
			$q->castAsChar('123'),
			$this->equalTo('123'),
			'The default castAsChar behaviour is to return the input.'
		);

	}

	/**
	 * Test for the charLength method.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testCharLength()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
			$q->charLength('a.title'),
			$this->equalTo('CHAR_LENGTH(a.title)')
		);
	}

	public function testChaining()
	{
		$q = $this->dbo->getQuery(true)->select('foo');

		$this->assertThat(
			$q,
			$this->isInstanceOf('JDatabaseQuery')
		);
	}

	/**
	 * Test for the clear method (clearing all types and clauses).
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testClear_all()
	{
		$properties = array(
			'select',
			'delete',
			'update',
			'insert',
			'from',
			'join',
			'set',
			'where',
			'group',
			'having',
			'order',
			'columns',
			'values',
		);

		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		// First pass - set the values.
		foreach ($properties as $property)
		{
			$q->$property = $property;
		}

		// Clear the whole query.
		$q->clear();

		// Check that all properties have been cleared
		foreach ($properties as $property)
		{
			$this->assertThat(
				$q->get($property),
				$this->equalTo(null)
			);
		}

		// And check that the type has been cleared.
		$this->assertThat(
			$q->type,
			$this->equalTo(null)
		);
	}

	/**
	 * Test for the clear method (clearing each clause).
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testClear_clause()
	{
		$clauses = array(
			'from',
			'join',
			'set',
			'where',
			'group',
			'having',
			'order',
			'columns',
			'values',
		);


		// Test each clause.
		foreach ($clauses as $clause)
		{
			$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

			// Set the clauses
			foreach ($clauses as $clause2)
			{
				$q->$clause2 = $clause2;
			}

			// Clear the clause.
			$q->clear($clause);

			// Check that clause was cleared.
			$this->assertThat(
				$q->get($clause),
				$this->equalTo(null)
			);

			// Check the state of the other clauses.
			foreach ($clauses as $clause2)
			{
				if ($clause != $clause2) {
					$this->assertThat(
						$q->get($clause2),
						$this->equalTo($clause2),
						"Clearing $clause resulted in $clause2 having a value of ".$q->get($clause2).'.'
					);
				}
			}
		}
	}

	/**
	 * Test for the clear method (clearing each query type).
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testClear_type()
	{
		$types = array(
			'select',
			'delete',
			'update',
			'insert',
		);

		$clauses = array(
			'from',
			'join',
			'set',
			'where',
			'group',
			'having',
			'order',
			'columns',
			'values',
		);

		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		// Set the clauses.
		foreach ($clauses as $clause)
		{
			$q->$clause = $clause;
		}

		// Check that all properties have been cleared
		foreach ($types as $type)
		{
			// Set the type.
			$q->$type = $type;

			// Clear the type.
			$q->clear($type);

			// Check the type has been cleared.
			$this->assertThat(
				$q->type,
				$this->equalTo(null)
			);

			$this->assertThat(
				$q->get($type),
				$this->equalTo(null)
			);

			// Now check the claues have not been affected.
			foreach ($clauses as $clause)
			{
				$this->assertThat(
					$q->get($clause),
					$this->equalTo($clause)
				);
			}
		}
	}

	/**
	 * Test for FROM clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testFrom()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->from('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->from('jos_dbtest');
		
		$this->assertThat(
					$q->get('from'),
					$this->equalTo($query->from) );
	}

	/**
	 * Test for GROUP clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testGroup()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->group('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->group('jos_dbtest');
		
		$this->assertThat(
					$q->get('group'),
					$this->equalTo($query->group) );
	}

	/**
	 * Test for HAVING clause using a simple condition and with glue for second one.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testHaving()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->having('i=3');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->having('i=3');
		
		$this->assertThat(
					$q->get('having'),
					$this->equalTo($query->having) );
					
					
		/* check glue */
		$q->having('k<>2','AND');
		$query->having('k<>2','AND');
		
		$this->assertThat(
					$q->get('having'),
					$this->equalTo($query->having) );
	}

	/**
	 * Test for INNER JOIN clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testInnerJoin()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->innerJoin('b ON b.id = a.id');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->innerJoin('b ON b.id = a.id');
		
		$this->assertThat(
					$q->get('innerJoin'),
					$this->equalTo($query->innerJoin) );
	}

	/**
	 * Test for JOIN clause using dataprovider to test all types of join.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 * @dataProvider  dataTestJoin
	 */
	public function testJoin($type, $conditions)
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->join($type, $conditions);
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->join($type, $conditions);
		
		$this->assertThat(
					$q->get('join'),
					$this->equalTo($query->join) );
	}

	/**
	 * Test for LEFT JOIN clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testLeftJoin()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->leftJoin('b ON b.id = a.id');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->leftJoin('b ON b.id = a.id');
		
		$this->assertThat(
					$q->get('leftJoin'),
					$this->equalTo($query->leftJoin) );
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @param   boolean  $quoted    The value of the quoted argument.
	 * @param   string   $expected  The expected result.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 * @dataProvider  dataTestNullDate
	 */
	public function testNullDate($quoted, $expected)
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
			$q->nullDate($quoted),
			$this->equalTo($expected),
			'The nullDate method should be a proxy for the JDatabase::getNullDate method.'
		);
	}
	/**
	 * Test for ORDER clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testOrder()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->order('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->order('jos_dbtest');
		
		$this->assertThat(
					$q->get('order'),
					$this->equalTo($query->order) );
	}

	/**
	 * Test for OUTER JOIN clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testOuterJoin()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->outerJoin('b ON b.id = a.id');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->outerJoin('b ON b.id = a.id');
		
		$this->assertThat(
					$q->get('outerJoin'),
					$this->equalTo($query->outerJoin) );
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @param   boolean  $text      The value to be quoted.
	 * @param   boolean  $escape    True to escape the string, false to leave it unchanged.
	 * @param   string   $expected  The expected result.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 * @dataProvider  dataTestQuote
	 */
	public function testQuote($text, $escape, $expected)
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
			$q->quoteName("test"),
			$this->equalTo("'test'"),
			'The quoteName method should be a proxy for the JDatabase::escape method.'
		);
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testQuoteName()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
			$q->quoteName("test"),
			$this->equalTo("'test'"),
			'The quoteName method should be a proxy for the JDatabase::escape method.'
		);
	}

	/**
	 * Test for RIGHT JOIN clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testRightJoin()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->rightJoin('b ON b.id = a.id');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->rightJoin('b ON b.id = a.id');
		
		$this->assertThat(
					$q->get('rightJoin'),
					$this->equalTo($query->rightJoin) );
	}

	/**
	 * Test for SELECT clause.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testSelect()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->select('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->select('jos_dbtest');
		
		$this->assertThat(
					$q->get('select'),
					$this->equalTo($query->select) );
	}

	/**
	 * Test for WHERE clause using a simple condition and with glue for second one. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testWhere()
	{		
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->where('i=3');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->where('i=3');
		
		$this->assertThat(
					$q->get('where'),
					$this->equalTo($query->where) );
					
		/* check with glue */
		$q->where('f<>7', 'OR');
		$query->where('f<>7', 'OR');
		
		$this->assertThat(
					$q->get('where'),
					$this->equalTo($query->where) );
	}
	
	
	
	
	
	/* TO CONVERT */
	/**
	 * Test for FOR UPDATE clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testForUpdate ()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->forUpdate('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->forUpdate('jos_dbtest');
		
		$this->assertThat(
					$q->get('forUpdate'),
					$this->equalTo($query->forUpdate) );
					
		/* check with glue */
		$q->forUpdate('jos_assets', ',');
		$query->forUpdate('jos_assets', ',');
		
		$this->assertThat(
					$q->get('forUpdate'),
					$this->equalTo($query->forUpdate) );
	}
	
	/**
	 * Test for FOR SHARE clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testForShare ()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->forShare('jos_dbtest');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->forShare('jos_dbtest');
		
		$this->assertThat(
					$q->get('forShare'),
					$this->equalTo($query->forShare) );
					
		/* check with glue */
		$q->forShare('jos_assets', ',');
		$query->forShare('jos_assets', ',');
		
		$this->assertThat(
					$q->get('forShare'),
					$this->equalTo($query->forShare) );
	}
	
	/**
	 * Test for NOWAIT clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testNoWait ()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->noWait();
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->noWait();
		
		$this->assertThat(
					$q->get('noWait'),
					$this->equalTo($query->noWait) );
	}
	
   	/** 
   	 * Test for LOCK clause. 
	 *
	 * @return  void
	 * @since   11.1
	 * @dataProvider  dataTestLock
	 */
	public function testLock($table_name, $lock_type)
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->lock($table_name, $lock_type);
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->lock($table_name,$lock_type);
		
		$this->assertThat(
					$q->get('lock'),
					$this->equalTo($query->lock) );
	}

	/** 
	 * Test for UNLOCK clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testUnlock()  
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		
		$this->assertThat(
					$q->unlock(),
					$this->isTrue() );
	}
	
	/** 
	 * Test for LIMIT clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testLimit()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->limit('5');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->limit('5');
		
		$this->assertThat(
					$q->get('limit'),
					$this->equalTo($query->limit) );
	}
	
	/** 
	 * Test for OFFSET clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testOffset()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->offset('10');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->offset('10');
		
		$this->assertThat(
					$q->get('offset'),
					$this->equalTo($query->offset) );
	}
	
	/** 
	 * Test for RETURNING clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testReturning()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->returning('id');
		
		$query = new JDatabaseQueryPostgreSQL();
		$query->returning('id');
		
		$this->assertThat(
					$q->get('returning'),
					$this->equalTo($query->returning) );
	}
}