<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Registry
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM.'/joomla/registry/format.php';

/**
 * Test class for JRegistryFormatPHP.
 * Generated by PHPUnit on 2009-10-27 at 15:13:25.
 */
class JRegistryFormatPHPTest extends PHPUnit_Framework_TestCase
{
	/**
<<<<<<< HEAD
=======
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	function setUp()
	{
		$this->instance = new JRegistryFormatPHP;
	}

	/**
	 * Convert an array into an object.
	 *
	 * @param   array
	 * @return  object
	 */
	private static function _objectFactory($properties)
	{
		$obj = new stdClass();
		foreach ($properties as $k => $v) {
			$obj->{$k} = $v;
		}
		return $obj;
	}

	/**
	 * Get the objects to run tests on.
	 */
	public function getObjects()
	{
		$tests = array(
			'Regular Object' => array(
				self::_objectFactory(array('test1' => 'value1', 'test2' => 'value2')),
				array('class' => 'myClass'),
				'<?php'."\n".'class myClass {'."\n\t".'public $test1 = \'value1\';'."\n\t".'public $test2 = \'value2\';'."\n}\n".'?>'
			),
			'Object with Double Quote' => array(
				self::_objectFactory(array('test1' => 'value1"', 'test2' => 'value2')),
				array('class' => 'myClass'),
				'<?php'."\n".'class myClass {'."\n\t".'public $test1 = \'value1"\';'."\n\t".'public $test2 = \'value2\';'."\n}\n".'?>'
			)

		);

		return $tests;
	}

	/**
>>>>>>> Merged joomla-platform/master with gpongelli/postgresql.
	 * Test the JRegistryFormatPHP::objectToString method.
	 */
	function testObjectToString()
	{
		$class = JRegistryFormat::getInstance('PHP');
		$options = array('class' => 'myClass');
		$object = new stdClass;
		$object->foo = 'bar';
		$object->quoted = '"stringwithquotes"';
		$object->booleantrue = true;
		$object->booleanfalse = false;
		$object->numericint = 42;
		$object->numericfloat = 3.1415;
		$object->section = new stdClass(); //The PHP registry format does not support nested objects
		$object->section->key = 'value';
		$object->array = array('nestedarray' => array('test1' => 'value1'));
		
		$string = "<?php\n".
			"class myClass {\n".
			"\tpublic \$foo = 'bar';\n".
			"\tpublic \$quoted = '\"stringwithquotes\"';\n".
			"\tpublic \$booleantrue = '1';\n".
			"\tpublic \$booleanfalse = '';\n".
			"\tpublic \$numericint = '42';\n".
			"\tpublic \$numericfloat = '3.1415';\n".
			"\tpublic \$section = array(\"key\" => \"value\");\n".
			"\tpublic \$array = array(\"nestedarray\" => array(\"test1\" => \"value1\"));\n".
			"}\n?>"; 
		$this->assertThat(
			$class->objectToString($object, $options),
			$this->equalTo($string)
		);
	}

	/**
	 * Test the JRegistryFormatPHP::stringToObject method.
	 */
	public function testStringToObject()
	{
		$class = JRegistryFormat::getInstance('PHP');
		// This method is not implemented in the class. The test is to achieve 100% code coverage
		$this->assertTrue($class->stringToObject(''));
	}
}
