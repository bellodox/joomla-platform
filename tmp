Added test testGetEscaped and its dataProvider dataTestGetEscaped.
Added dataProvider to testGetVersion.
Added test testGetTableColumns.
Implemented testSetUTF.
Added test loadNextRow and loadNextObject.


Replaced `` with quoteName() inside query/queries.



Added mockGetQuery and mockSetQuery.
Changed mockQuote and mockQuoteName.
Added the getDateFormat in assignMockReturns during creation.



// Finder admin/helpers/indexer/indexer.php
		$queryInsert = $db->getQuery(true);
		$querySelOuter = $db->getQuery(true);
		$querySelInner = $db->getQuery(true);

		$innerWhere = 't1.context = %d';
		$outerWhere = 't2.context = %d';
		$outerSel = ' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight';

		$querySelInner->select('DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context')
						->from($db->quoteName('#__finder_tokens') . ' AS t1');

		$querySelOuter->select('t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,')
						->join('', $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term')
						->leftJoin($db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term')
						->group('t1.term')
						->order('t1.term DESC');
						
						
// stesso file, ce n'Ã¨ n'altra simile
/*			$query->clear();
$query->insert($db->quoteName('#__finder_links_terms' . $suffix))
		->columns(
			$db->quoteName('link_id') . ', ' .
			$db->quoteName('term_id') . ', ' .
			$db->quoteName('weight')
		)
		->values(
			' SELECT ' .
				(int) $linkId . ', ' .
				$db->quoteName('term_id') . ', ' .
				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .
				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .
				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .
				' GROUP BY ' . $db->quoteName('term') .
				' ORDER BY ' . $db->quoteName('term') . ' DESC'
		);*/
			
			
			
			
			
			
			
______________________________________________________________________________

// databasequery backup solo funz interessate da lock e unlock


	/**
	 * Magic function to convert the query to a string.
	 *
	 * @return  string	The completed query.
	 *
	 * @since   11.1
	 */
	public function __toString()
	{
		$query = '';

		switch ($this->type)
		{
			case 'element':
				$query .= (string) $this->element;
				break;

			case 'select':
				$query .= (string) $this->select;
				$query .= (string) $this->from;
				if ($this->join)
				{
					// special case for joins
					foreach ($this->join as $join)
					{
						$query .= (string) $join;
					}
				}

				if ($this->where)
				{
					$query .= (string) $this->where;
				}

				if ($this->group)
				{
					$query .= (string) $this->group;
				}

				if ($this->having)
				{
					$query .= (string) $this->having;
				}

				if ($this->order)
				{
					$query .= (string) $this->order;
				}

				break;

			case 'delete':
				$query .= (string) $this->delete;
				$query .= (string) $this->from;

				if ($this->join)
				{
					// special case for joins
					foreach ($this->join as $join)
					{
						$query .= (string) $join;
					}
				}

				if ($this->where)
				{
					$query .= (string) $this->where;
				}

				break;

			case 'update':
				$query .= (string) $this->update;
				$query .= (string) $this->set;

				if ($this->where)
				{
					$query .= (string) $this->where;
				}

				break;

			case 'insert':
				$query .= (string) $this->insert;

				// Set method
				if ($this->set)
				{
					$query .= (string) $this->set;
				}
				// Columns-Values method
				elseif ($this->values)
				{
					if ($this->columns)
					{
						$query .= (string) $this->columns;
					}

					$query .= ' VALUES ';
					$query .= (string) $this->values;
				}

				break;

			case 'lock':
				$query .= (string) $this->lock;
				break;

			case 'unlock':
				$query .= (string) $this->unlock;
				break;

		}

		return $query;
	}



	/**
	 * Clear data from the query or a specific clause of the query.
	 *
	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.
	 *
	 * @return  JDatabaseQuery  Returns this object to allow chaining.
	 *
	 * @since   11.1
	 */
	public function clear($clause = null)
	{
		switch ($clause)
		{
			case 'select':
				$this->select = null;
				$this->type = null;
				break;

			case 'delete':
				$this->delete = null;
				$this->type = null;
				break;

			case 'update':
				$this->update = null;
				$this->type = null;
				break;

			case 'insert':
				$this->insert = null;
				$this->type = null;
				break;

			case 'from':
				$this->from = null;
				break;

			case 'join':
				$this->join = null;
				break;

			case 'set':
				$this->set = null;
				break;

			case 'where':
				$this->where = null;
				break;

			case 'group':
				$this->group = null;
				break;

			case 'having':
				$this->having = null;
				break;

			case 'order':
				$this->order = null;
				break;

			case 'columns':
				$this->columns = null;
				break;

			case 'values':
				$this->values = null;
				break;

			case 'lock':
				$this->lock = null;
				break;

			case 'unlock':
				$this->unlock = null;
				break;

			default:
				$this->type = null;
				$this->select = null;
				$this->delete = null;
				$this->update = null;
				$this->insert = null;
				$this->from = null;
				$this->join = null;
				$this->set = null;
				$this->where = null;
				$this->group = null;
				$this->having = null;
				$this->order = null;
				$this->columns = null;
				$this->values = null;
				$this->lock = null;
				$this->unlock = null;
				break;
		}

		return $this;
	}


	/**
	 * Method to lock the database table for writing.
	 *
	 * @param   string  $table_name  The table name to lock
	 * @param   string  $lock_type   Lock table type
	 *
	 * @return  boolean  True on success.
	 * 
	 * @since   11.3
	 */
	public function lock($table_name, $lock_type)
	{
		$this->type = 'lock';

		if (is_null($this->lock))
		{
			$this->lock = new JDatabaseQueryElement('LOCK TABLES', " $table_name $lock_type");
		}
		else
		{
			$this->lock->append(" $table_name $lock_type");
		}

		return $this;
	}

	/**
	 * Method to unlock the database table for writing.
	 *
	 * @return  boolean  True on success.
	 * 
	 * @since   11.3
	 */
	public function unlock()
	{
		$this->type = 'unlock';

		if (is_null($this->unlock))
		{
			$this->unlock = new JDatabaseQueryElement('UNLOCK TABLES', '');
		}

		return $this;
	}
______________________________________________________________________________


// TEST PER LOCK E UNLOCK, file JDatabasePostgreQueryTest.php
/** 
	 * Test for LOCK clause. 
	 *
	 * @return  void
	 * 
	 * @since   11.1
	 * @dataProvider  dataTestLock
	 */
	public function testLock($table_name, $lock_type)
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);
		$q->lock($table_name, $lock_type);

		$query = new JDatabaseQueryPostgreSQL;
		$query->lock($table_name, $lock_type);

		$this->assertThat(
					$q->get('lock'),
					$this->equalTo($query->lock)
					);
	}

	/** 
	 * Test for UNLOCK clause. 
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testUnlock()
	{
		$q = new JDatabasePostgreSQLQueryInspector($this->dbo);

		$this->assertThat(
					$q->unlock(),
					$this->isTrue()
					);
	}
